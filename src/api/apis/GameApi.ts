/* tslint:disable */
/* eslint-disable */
/**
 * Jaipur
 * API pour le jeu de société Jaipur
 *
 * The version of the OpenAPI document: 1.0
 * Contact: julien@usson.me
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateGame,
    CreateGameFromJSON,
    CreateGameToJSON,
    ExchangePayload,
    ExchangePayloadFromJSON,
    ExchangePayloadToJSON,
    Game,
    GameFromJSON,
    GameToJSON,
    SellPayload,
    SellPayloadFromJSON,
    SellPayloadToJSON,
    TakeGoodPayload,
    TakeGoodPayloadFromJSON,
    TakeGoodPayloadToJSON,
} from '../models';

export interface CreateGameRequest {
    createGame?: CreateGame;
}

export interface DeleteGameByIdRequest {
    id: number;
}

export interface ExchangeRequest {
    id: number;
    playerIndex: number;
    exchangePayload?: ExchangePayload;
}

export interface FindOneGameByIdRequest {
    id: number;
}

export interface SellRequest {
    id: number;
    playerIndex: number;
    sellPayload?: SellPayload;
}

export interface TakeCamelsRequest {
    id: number;
    playerIndex: number;
}

export interface TakeGoodRequest {
    id: number;
    playerIndex: number;
    takeGoodPayload?: TakeGoodPayload;
}

/**
 * 
 */
export class GameApi extends runtime.BaseAPI {

    /**
     * Créer une partie
     */
    async createGameRaw(requestParameters: CreateGameRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Game>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/games`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateGameToJSON(requestParameters.createGame),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameFromJSON(jsonValue));
    }

    /**
     * Créer une partie
     */
    async createGame(requestParameters: CreateGameRequest, initOverrides?: RequestInit): Promise<Game> {
        const response = await this.createGameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Supprimer une partie
     */
    async deleteGameByIdRaw(requestParameters: DeleteGameByIdRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteGameById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/games/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Supprimer une partie
     */
    async deleteGameById(requestParameters: DeleteGameByIdRequest, initOverrides?: RequestInit): Promise<void> {
        await this.deleteGameByIdRaw(requestParameters, initOverrides);
    }

    /**
     * Prendre plusieurs marchandises
     */
    async exchangeRaw(requestParameters: ExchangeRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Game>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling exchange.');
        }

        if (requestParameters.playerIndex === null || requestParameters.playerIndex === undefined) {
            throw new runtime.RequiredError('playerIndex','Required parameter requestParameters.playerIndex was null or undefined when calling exchange.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.playerIndex !== undefined && requestParameters.playerIndex !== null) {
            headerParameters['playerIndex'] = String(requestParameters.playerIndex);
        }

        const response = await this.request({
            path: `/games/{id}/exchange`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ExchangePayloadToJSON(requestParameters.exchangePayload),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameFromJSON(jsonValue));
    }

    /**
     * Prendre plusieurs marchandises
     */
    async exchange(requestParameters: ExchangeRequest, initOverrides?: RequestInit): Promise<Game> {
        const response = await this.exchangeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Récupérer toutes les parties
     */
    async findAllGamesRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Game>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/games`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GameFromJSON));
    }

    /**
     * Récupérer toutes les parties
     */
    async findAllGames(initOverrides?: RequestInit): Promise<Array<Game>> {
        const response = await this.findAllGamesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Récupérer une partie
     */
    async findOneGameByIdRaw(requestParameters: FindOneGameByIdRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Game>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling findOneGameById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/games/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameFromJSON(jsonValue));
    }

    /**
     * Récupérer une partie
     */
    async findOneGameById(requestParameters: FindOneGameByIdRequest, initOverrides?: RequestInit): Promise<Game> {
        const response = await this.findOneGameByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Vendre des cartes
     */
    async sellRaw(requestParameters: SellRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Game>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling sell.');
        }

        if (requestParameters.playerIndex === null || requestParameters.playerIndex === undefined) {
            throw new runtime.RequiredError('playerIndex','Required parameter requestParameters.playerIndex was null or undefined when calling sell.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.playerIndex !== undefined && requestParameters.playerIndex !== null) {
            headerParameters['playerIndex'] = String(requestParameters.playerIndex);
        }

        const response = await this.request({
            path: `/games/{id}/sell`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SellPayloadToJSON(requestParameters.sellPayload),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameFromJSON(jsonValue));
    }

    /**
     * Vendre des cartes
     */
    async sell(requestParameters: SellRequest, initOverrides?: RequestInit): Promise<Game> {
        const response = await this.sellRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Prendre les chameaux
     */
    async takeCamelsRaw(requestParameters: TakeCamelsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Game>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling takeCamels.');
        }

        if (requestParameters.playerIndex === null || requestParameters.playerIndex === undefined) {
            throw new runtime.RequiredError('playerIndex','Required parameter requestParameters.playerIndex was null or undefined when calling takeCamels.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.playerIndex !== undefined && requestParameters.playerIndex !== null) {
            headerParameters['playerIndex'] = String(requestParameters.playerIndex);
        }

        const response = await this.request({
            path: `/games/{id}/take-camels`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameFromJSON(jsonValue));
    }

    /**
     * Prendre les chameaux
     */
    async takeCamels(requestParameters: TakeCamelsRequest, initOverrides?: RequestInit): Promise<Game> {
        const response = await this.takeCamelsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Prendre 1 seule marchandise
     */
    async takeGoodRaw(requestParameters: TakeGoodRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Game>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling takeGood.');
        }

        if (requestParameters.playerIndex === null || requestParameters.playerIndex === undefined) {
            throw new runtime.RequiredError('playerIndex','Required parameter requestParameters.playerIndex was null or undefined when calling takeGood.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.playerIndex !== undefined && requestParameters.playerIndex !== null) {
            headerParameters['playerIndex'] = String(requestParameters.playerIndex);
        }

        const response = await this.request({
            path: `/games/{id}/take-good`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TakeGoodPayloadToJSON(requestParameters.takeGoodPayload),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameFromJSON(jsonValue));
    }

    /**
     * Prendre 1 seule marchandise
     */
    async takeGood(requestParameters: TakeGoodRequest, initOverrides?: RequestInit): Promise<Game> {
        const response = await this.takeGoodRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
